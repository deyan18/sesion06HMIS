package org.ual.selenium.login;

// Generated by Selenium IDE

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class LoginTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
   // driver = new ChromeDriver();
    
    int browser= 1; // 0: firefox, 1: chrome,...
	Boolean headless = false;

	switch (browser) {
	case 0:  // firefox
		// Firefox 
		// Descargar geckodriver de https://github.com/mozilla/geckodriver/releases
		// Descomprimir el archivo geckodriver.exe en la carpeta drivers

		System.setProperty("webdriver.gecko.driver",  "drivers/geckodriver.exe");
		FirefoxOptions firefoxOptions = new FirefoxOptions();
		if (headless) firefoxOptions.setHeadless(headless);
		driver = new FirefoxDriver(firefoxOptions);

		break;
	case 1: // chrome
		// Chrome
		// Descargar Chromedriver de https://chromedriver.chromium.org/downloads
		// Descomprimir el archivo chromedriver.exe en la carpeta drivers

		System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");
		ChromeOptions chromeOptions = new ChromeOptions();
		if (headless) chromeOptions.setHeadless(headless);
		chromeOptions.addArguments("window-size=1920,1080");
		driver = new ChromeDriver(chromeOptions);

		break;

	default:
		fail("Please select a browser");
		break;
	}
	
	js = (JavascriptExecutor) driver;
	vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void loginCorrecto() {
    // Test name: Login_Correcto
    // Step # | name | target | value
    // 1 | open | /login | 
    driver.get("http://localhost:8080/login");
    // 2 | setWindowSize | 699x738 | 
    driver.manage().window().setSize(new Dimension(699, 738));
    // 3 | click | id=username | 
    driver.findElement(By.id("username")).click();
    // 4 | type | id=username | sokaina@ual.es
    driver.findElement(By.id("username")).sendKeys("sokaina@ual.es");
    // 5 | click | id=password | 
    driver.findElement(By.id("password")).click();
    // 6 | type | id=password | sokaina
    driver.findElement(By.id("password")).sendKeys("sokaina");
    // 7 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
  }
  @Test
  public void loginIncorrecto() {
    // Test name: Login_Incorrecto
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8080/");
    // 2 | setWindowSize | 699x738 | 
    driver.manage().window().setSize(new Dimension(699, 738));
    // 3 | mouseOver | linkText=Iniciar sesion | 
    {
      WebElement element = driver.findElement(By.linkText("Iniciar sesion"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 4 | click | linkText=Iniciar sesion | 
    driver.findElement(By.linkText("Iniciar sesion")).click();
    // 5 | click | id=username | 
    driver.findElement(By.id("username")).click();
    // 6 | type | id=username | sokaina@ual.es
    driver.findElement(By.id("username")).sendKeys("sokaina@ual.es");
    // 7 | click | id=password | 
    driver.findElement(By.id("password")).click();
    // 8 | type | id=password | soka123
    driver.findElement(By.id("password")).sendKeys("soka123");
    // 9 | click | css=.form-signin | 
    driver.findElement(By.cssSelector(".form-signin")).click();
    // 10 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
  }
}
