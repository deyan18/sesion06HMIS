package org.ual.selenium.registro;
// Generated by Selenium IDE
import org.junit.Test;

import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class RegistroTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
	// Browser selector 
		int browser= 1; // 0: firefox, 1: chrome,...
		Boolean headless = false;

		switch (browser) {
		case 0:  // firefox
			// Firefox 
			// Descargar geckodriver de https://github.com/mozilla/geckodriver/releases
			// Descomprimir el archivo geckodriver.exe en la carpeta drivers

			System.setProperty("webdriver.gecko.driver",  "drivers/geckodriver.exe");
			FirefoxOptions firefoxOptions = new FirefoxOptions();
			if (headless) firefoxOptions.setHeadless(headless);
			driver = new FirefoxDriver(firefoxOptions);

			break;
		case 1: // chrome
			// Chrome
			// Descargar Chromedriver de https://chromedriver.chromium.org/downloads
			// Descomprimir el archivo chromedriver.exe en la carpeta drivers

			System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");
			ChromeOptions chromeOptions = new ChromeOptions();
			if (headless) chromeOptions.setHeadless(headless);
			chromeOptions.addArguments("window-size=1920,1080");
			driver = new ChromeDriver(chromeOptions);

			break;

		default:
			fail("Please select a browser");
			break;
		}
		js = (JavascriptExecutor) driver;
		vars = new HashMap<String, Object>();

  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void registrocorrecto() {
    // Test name: Registro_correcto
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8080/");
    // 2 | click | linkText=Registrarse | 
    driver.findElement(By.linkText("Registrarse")).click();
    // 3 | executeScript | return "ual-" + Math.floor(Math.random()*1500000)+"@ual.es" | emailrandom
    vars.put("emailrandom", js.executeScript("return \"ual-\" + Math.floor(Math.random()*1500000)+\"@ual.es\""));
    // 4 | echo | ${emailrandom} | 
    System.out.println(vars.get("emailrandom").toString());
    // 5 | type | id=email | ${emailrandom}
    driver.findElement(By.id("email")).sendKeys(vars.get("emailrandom").toString());
    // 6 | type | id=contrasenia | secreto
    driver.findElement(By.id("contrasenia")).sendKeys("secreto");
    // 7 | type | id=confirmar | secreto
    driver.findElement(By.id("confirmar")).sendKeys("secreto");
    // 8 | type | id=firstName | Nombre
    driver.findElement(By.id("firstName")).sendKeys("Nombre");
    // 9 | type | id=lastName | Apellido
    driver.findElement(By.id("lastName")).sendKeys("Apellido");
    // 10 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 11 | assertText | css=h3 | Se ha registrado correctamente!
    assertThat(driver.findElement(By.cssSelector("h3")).getText(), is("Se ha registrado correctamente!"));
  }
  @Test
  public void registroapellidosrango() {
    // Test name: Registro_apellidos_rango
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8080/");
    // 2 | click | linkText=Registrarse | 
    driver.findElement(By.linkText("Registrarse")).click();
    // 3 | executeScript | return "ual-" + Math.floor(Math.random()*1500000)+"@ual.es" | emailrandom
    vars.put("emailrandom", js.executeScript("return \"ual-\" + Math.floor(Math.random()*1500000)+\"@ual.es\""));
    // 4 | echo | ${emailrandom} | 
    System.out.println(vars.get("emailrandom").toString());
    // 5 | type | id=email | ${emailrandom}
    driver.findElement(By.id("email")).sendKeys(vars.get("emailrandom").toString());
    // 6 | type | id=contrasenia | prueba
    driver.findElement(By.id("contrasenia")).sendKeys("prueba");
    // 7 | type | id=confirmar | prueba
    driver.findElement(By.id("confirmar")).sendKeys("prueba");
    // 8 | type | id=firstName | Alumno
    driver.findElement(By.id("firstName")).sendKeys("Alumno");
    // 9 | type | id=lastName | Alumnoconnombremuylargo
    driver.findElement(By.id("lastName")).sendKeys("Alumnoconnombremuylargo");
    // 10 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 11 | executeScript | return document.getElementById("lastName").validationMessage | message
    vars.put("message", js.executeScript("return document.getElementById(\"lastName\").validationMessage"));
    // 12 | echo | ${message} | 
    System.out.println(vars.get("message").toString());
    // 13 | assert | message | Please match the requested format.
    assertEquals(vars.get("message").toString(), "Please match the format requested.");
  }
  @Test
  public void registroapellidosvacio() {
    // Test name: Registro_apellidos_vacio
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8080/");
    // 2 | click | linkText=Registrarse | 
    driver.findElement(By.linkText("Registrarse")).click();
    // 3 | executeScript | return "ual-" + Math.floor(Math.random()*1500000)+"@ual.es" | emailrandom
    vars.put("emailrandom", js.executeScript("return \"ual-\" + Math.floor(Math.random()*1500000)+\"@ual.es\""));
    // 4 | echo | ${emailrandom} | 
    System.out.println(vars.get("emailrandom").toString());
    // 5 | type | id=email | ${emailrandom}
    driver.findElement(By.id("email")).sendKeys(vars.get("emailrandom").toString());
    // 6 | type | id=contrasenia | prueba
    driver.findElement(By.id("contrasenia")).sendKeys("prueba");
    // 7 | type | id=confirmar | prueba
    driver.findElement(By.id("confirmar")).sendKeys("prueba");
    // 8 | type | id=firstName | Alumno
    driver.findElement(By.id("firstName")).sendKeys("Alumno");
    // 9 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 10 | executeScript | return document.getElementById("lastName").validationMessage | message
    vars.put("message", js.executeScript("return document.getElementById(\"lastName\").validationMessage"));
    // 11 | echo | ${message} | 
    System.out.println(vars.get("message").toString());
    // 12 | assert | message | Please fill out this field.
    assertEquals(vars.get("message").toString(), "Please fill in this field.");
  }
  @Test
  public void registrocontraseniadiferente() {
    // Test name: Registro_contrasenia_diferente
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8080/");
    // 2 | click | linkText=Registrarse | 
    driver.findElement(By.linkText("Registrarse")).click();
    // 3 | executeScript | return "ual-" + Math.floor(Math.random()*1500000)+"@ual.es" | emailrandom
    vars.put("emailrandom", js.executeScript("return \"ual-\" + Math.floor(Math.random()*1500000)+\"@ual.es\""));
    // 4 | echo | ${emailrandom} | 
    System.out.println(vars.get("emailrandom").toString());
    // 5 | type | id=email | ${emailrandom}
    driver.findElement(By.id("email")).sendKeys(vars.get("emailrandom").toString());
    // 6 | type | id=contrasenia | prueba
    driver.findElement(By.id("contrasenia")).sendKeys("prueba");
    // 7 | type | id=confirmar | malmal
    driver.findElement(By.id("confirmar")).sendKeys("malmal");
    // 8 | type | id=firstName | Alumno
    driver.findElement(By.id("firstName")).sendKeys("Alumno");
    // 9 | type | id=lastName | Ual
    driver.findElement(By.id("lastName")).sendKeys("Ual");
    // 10 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 11 | assertAlert | La contrase√±a no es igual a su confirmacion | 
    assertThat(driver.switchTo().alert().getText(), is("La contrasenia no es igual a su confirmacion"));
  }
  @Test
  public void registrocontraseniarango() {
    // Test name: Registro_contrasenia_rango
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8080/");
    // 2 | click | linkText=Registrarse | 
    driver.findElement(By.linkText("Registrarse")).click();
    // 3 | executeScript | return "ual-" + Math.floor(Math.random()*1500000)+"@ual.es" | emailrandom
    vars.put("emailrandom", js.executeScript("return \"ual-\" + Math.floor(Math.random()*1500000)+\"@ual.es\""));
    // 4 | echo | ${emailrandom} | 
    System.out.println(vars.get("emailrandom").toString());
    // 5 | type | id=email | ${emailrandom}
    driver.findElement(By.id("email")).sendKeys(vars.get("emailrandom").toString());
    // 6 | type | id=contrasenia | prueba
    driver.findElement(By.id("contrasenia")).sendKeys("prueba");
    // 7 | type | id=confirmar | pru
    driver.findElement(By.id("confirmar")).sendKeys("pru");
    // 8 | type | id=firstName | Alumno
    driver.findElement(By.id("firstName")).sendKeys("Alumno");
    // 9 | type | id=lastName | Ual
    driver.findElement(By.id("lastName")).sendKeys("Ual");
    // 10 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 11 | executeScript | return document.getElementById("confirmar").validationMessage | message
    vars.put("message", js.executeScript("return document.getElementById(\"confirmar\").validationMessage"));
    // 12 | echo | ${message} | 
    System.out.println(vars.get("message").toString());
    // 13 | assert | message | Please match the requested format.
    assertEquals(vars.get("message").toString(), "Please match the format requested.");
  }
  @Test
  public void registroemail1() {
    // Test name: Registro_email1
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8080/");
    // 2 | setWindowSize | 742x886 | 
    driver.manage().window().setSize(new Dimension(742, 886));
    // 3 | click | linkText=Registrarse | 
    driver.findElement(By.linkText("Registrarse")).click();
    // 4 | click | id=email | 
    driver.findElement(By.id("email")).click();
    // 5 | type | id=email | correo.com
    driver.findElement(By.id("email")).sendKeys("correo.com");
    // 6 | type | id=contrasenia | prueba
    driver.findElement(By.id("contrasenia")).sendKeys("prueba");
    // 7 | type | id=confirmar | prueba
    driver.findElement(By.id("confirmar")).sendKeys("prueba");
    // 8 | type | id=firstName | Almuno
    driver.findElement(By.id("firstName")).sendKeys("Almuno");
    // 9 | type | id=lastName | Ual
    driver.findElement(By.id("lastName")).sendKeys("Ual");
    // 10 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 11 | executeScript | return document.getElementById("email").validationMessage | message
    vars.put("message", js.executeScript("return document.getElementById(\"email\").validationMessage"));
    // 12 | echo | ${message} | 
    System.out.println(vars.get("message").toString());
    // 13 | assert | message | Please include an '@' in the email address. 'correo.com' is missing an '@'.
    assertEquals(vars.get("message").toString(), "Please include an \'@\' in the email address. \'correo.com\' is missing an \'@\'.");
  }
  @Test
  public void registroemail2() {
    // Test name: Registro_email2
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8080/");
    // 2 | setWindowSize | 742x886 | 
    driver.manage().window().setSize(new Dimension(742, 886));
    // 3 | click | linkText=Registrarse | 
    driver.findElement(By.linkText("Registrarse")).click();
    // 4 | type | id=email | correo@
    driver.findElement(By.id("email")).sendKeys("correo@");
    // 5 | type | id=contrasenia | prueba
    driver.findElement(By.id("contrasenia")).sendKeys("prueba");
    // 6 | type | id=confirmar | prueba
    driver.findElement(By.id("confirmar")).sendKeys("prueba");
    // 7 | type | id=firstName | Almuno
    driver.findElement(By.id("firstName")).sendKeys("Almuno");
    // 8 | type | id=lastName | Ual
    driver.findElement(By.id("lastName")).sendKeys("Ual");
    // 9 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 10 | executeScript | return document.getElementById("email").validationMessage | message
    vars.put("message", js.executeScript("return document.getElementById(\"email\").validationMessage"));
    // 11 | echo | ${message} | 
    System.out.println(vars.get("message").toString());
    // 12 | assert | message | Please enter a part following '@'. 'correo@' is incomplete.
    assertEquals(vars.get("message").toString(), "Please enter a part following \'@\'. \'correo@\' is incomplete.");
  }
  @Test
  public void registronombrerango() {
    // Test name: Registro_nombre_rango
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8080/");
    // 2 | click | linkText=Registrarse | 
    driver.findElement(By.linkText("Registrarse")).click();
    // 3 | executeScript | return "ual-" + Math.floor(Math.random()*1500000)+"@ual.es" | emailrandom
    vars.put("emailrandom", js.executeScript("return \"ual-\" + Math.floor(Math.random()*1500000)+\"@ual.es\""));
    // 4 | echo | ${emailrandom} | 
    System.out.println(vars.get("emailrandom").toString());
    // 5 | type | id=email | ${emailrandom}
    driver.findElement(By.id("email")).sendKeys(vars.get("emailrandom").toString());
    // 6 | type | id=contrasenia | prueba
    driver.findElement(By.id("contrasenia")).sendKeys("prueba");
    // 7 | type | id=confirmar | prueba
    driver.findElement(By.id("confirmar")).sendKeys("prueba");
    // 8 | type | id=firstName | A
    driver.findElement(By.id("firstName")).sendKeys("A");
    // 9 | type | id=lastName | Ual
    driver.findElement(By.id("lastName")).sendKeys("Ual");
    // 10 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 11 | executeScript | return document.getElementById("firstName").validationMessage | message
    vars.put("message", js.executeScript("return document.getElementById(\"firstName\").validationMessage"));
    // 12 | echo | ${message} | 
    System.out.println(vars.get("message").toString());
    // 13 | assert | message | Please match the requested format.
    assertEquals(vars.get("message").toString(), "Please match the format requested.");
  }
  @Test
  public void registronombrevacio() {
    // Test name: Registro_nombre_vacio
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("http://localhost:8080/");
    // 2 | click | linkText=Registrarse | 
    driver.findElement(By.linkText("Registrarse")).click();
    // 3 | executeScript | return "ual-" + Math.floor(Math.random()*1500000)+"@ual.es" | emailrandom
    vars.put("emailrandom", js.executeScript("return \"ual-\" + Math.floor(Math.random()*1500000)+\"@ual.es\""));
    // 4 | echo | ${emailrandom} | 
    System.out.println(vars.get("emailrandom").toString());
    // 5 | type | id=email | ${emailrandom}
    driver.findElement(By.id("email")).sendKeys(vars.get("emailrandom").toString());
    // 6 | type | id=contrasenia | prueba
    driver.findElement(By.id("contrasenia")).sendKeys("prueba");
    // 7 | type | id=confirmar | prueba
    driver.findElement(By.id("confirmar")).sendKeys("prueba");
    // 8 | type | id=lastName | Ual
    driver.findElement(By.id("lastName")).sendKeys("Ual");
    // 9 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 10 | executeScript | return document.getElementById("firstName").validationMessage | message
    vars.put("message", js.executeScript("return document.getElementById(\"firstName\").validationMessage"));
    // 11 | echo | ${message} | 
    System.out.println(vars.get("message").toString());
    // 12 | assert | message | Please fill out this field.
    assertEquals(vars.get("message").toString(), "Please fill in this field.");
  }
}
